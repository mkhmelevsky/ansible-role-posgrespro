---
# file: tasks/databases.yml

- name: "{{ postgresql_daemon }} | Setup databases"
  become: True
  block:
    - name: Ensure service is running
      service:
        name: "{{ postgresql_service_name }}"
        state: started

    - name: Make sure that the databases are present
      postgresql_db:
        name: "{{ item.name }}"
        owner: "{{ item.owner | default(postgresql_database_owner) }}"
        encoding: "{{ item.encoding | default(postgresql_encoding) }}"
        port: "{{ postgresql_port }}"
        template: "{{ item.template | default(postgresql_default_template) }}"
        state: present
        login_user: "{{ postgresql_admin_user }}"
        login_unix_socket: "{{ postgresql_unix_socket_directories[0] }}"
      become: True
      become_user: "{{ postgresql_admin_user }}"
      loop: "{{ postgresql_databases }}"
      when: postgresql_databases | length > 0

    - name: Add extensions to the databases
      shell: "{{ postgresql_bin_directory }}/psql {{ item.0.db }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS {{ item.1 }};'"
      become: True
      become_user: "{{ postgresql_service_user }}"
      with_subelements:
        - "{{ postgresql_database_extensions }}"
        - extensions
      register: task_result
      retries: 3
      delay: 2
      until: task_result is succeeded
      changed_when: "'NOTICE' not in task_result.stderr"

    - name: Add hstore to the databases with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS hstore;'"
      loop: "{{ postgresql_databases }}"
      register: hstore_ext_result
      failed_when: hstore_ext_result.rc != 0 and ("already exists, skipping" not in hstore_ext_result.stderr)
      changed_when: hstore_ext_result.rc == 0 and ("already exists, skipping" not in hstore_ext_result.stderr)
      when: item.hstore is defined and item.hstore
      retries: 3
      delay: 2
      until: hstore_ext_result is succeeded

    - name: Add uuid-ossp to the database with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";'"
      loop: "{{ postgresql_databases }}"
      register: uuid_ext_result
      failed_when: uuid_ext_result.rc != 0 and ("already exists, skipping" not in uuid_ext_result.stderr)
      changed_when: uuid_ext_result.rc == 0 and ("already exists, skipping" not in uuid_ext_result.stderr)
      when: item.uuid_ossp is defined and item.uuid_ossp
      retries: 3
      delay: 2
      until: uuid_ext_result is succeeded

    - name: Add postgis to the databases with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: |
        {{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'\
        && {{ postgresql_bin_directory }}/psql {{ item.name }} -c 'CREATE EXTENSION IF NOT EXISTS postgis_topology;'
      loop: "{{ postgresql_databases }}"
      when: item.gis is defined and item.gis
      register: task_result
      retries: 3
      delay: 2
      until: task_result is succeeded

    - name: Add cube to the database with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'create extension if not exists cube;'"
      loop: "{{ postgresql_databases }}"
      when: item.cube is defined and item.cube
      register: task_result
      retries: 3
      delay: 2
      until: task_result is succeeded

    - name: Add plpgsql to the database with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS plpgsql;'"
      loop: "{{ postgresql_databases }}"
      when: item.plpgsql is defined and item.plpgsql
      register: task_result
      retries: 3
      delay: 2
      until: task_result is succeeded

    - name: Add earthdistance to the database with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'create extension if not exists earthdistance;'"
      loop: "{{ postgresql_databases }}"
      when: item.earthdistance is defined and item.earthdistance
      register: task_result
      retries: 3
      delay: 2
      until: task_result is succeeded

    - name: Add citext to the database with the requirement
      become: True
      become_user: "{{ postgresql_service_user }}"
      shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS citext;'"
      loop: "{{ postgresql_databases }}"
      register: citext_ext_result
      failed_when: citext_ext_result.rc != 0 and ("already exists, skipping" not in citext_ext_result.stderr)
      changed_when: citext_ext_result.rc == 0 and ("already exists, skipping" not in citext_ext_result.stderr)
      when: item.citext is defined and item.citext
      retries: 3
      delay: 2
      until: citext_ext_result is succeeded

...
